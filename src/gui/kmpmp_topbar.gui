# new topbar implementation with power bloc infos
# still WIP
# to enable this topbar we need to change ingame_hud.gui
# maybe we should implement a topbar chooser...

@secondary_icon_size = 26

types topbar_components
{
	### SECONDARY ICONS
	type kmpmp_topbar_secondary_icons = container {
		position = { 120 40 }
		
		flowcontainer = {
			direction = vertical
			spacing = 1	
			
			flowcontainer = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"			
				block "animation" {
					position = { 0 0 }
					alpha = 0
						
					state = {
						name = show_topbar_secondary_stats
						alpha = 1
						position_y = 44
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_topbar_secondary_stats
						alpha = 0
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
				}
					
				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
					margin_right = 20
				}

				# GDP
				flowcontainer = {
					name = "tutorial_highlight_gdp"
					# minimumsize = { 88 30 }
					minimumsize = { 85 30 }
					# maximumsize = { 88 30 }
					maximumsize = { 85 30 }
					spacing = 2
					using = GDP_tooltip_with_graph
					using = tooltip_below

					onmousehierarchyenter = "[SetTempMapModeByKey('mm_gdp')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alwaystransparent = no
					
					icon = {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetGDP|1*]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}
				
				# Literacy
				flowcontainer = {
					# minimumsize = { 84 30 }
					minimumsize = { 73 30 }
					# maximumsize = { 84 30 }
					maximumsize = { 73 30 }
					spacing = 2
					using = literacy_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_literacy')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/literacy.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetIncorporatedLiteracyRate|%1]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Total Population
				flowcontainer = {
					# minimumsize = { 78 30 }
					minimumsize = { 80 30 }
					# maximumsize = { 78 30 }
					maximumsize = { 80 30 }
					spacing = 2	
					using = population_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_population')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetTotalPopulation|D]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
						margin_right = 3
					}
				}

				# Loyalists
				flowcontainer = {
					# minimumsize = { 76 30 }
					minimumsize = { 80 30 }
					# maximumsize = { 76 30 }
					maximumsize = { 80 30 }
					spacing = 2	
					using = loyalists_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_loyalists')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alpha = "[TransparentIfZero_int64(Country.GetNumLoyalists)]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetNumLoyalists|D]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Peasants
				flowcontainer = {
					name = "peasants"
					# minimumsize = { 85 28 }
					minimumsize = { 80 30 }
					# maximumsize = { 85 28 }
					maximumsize = { 80 30 }
					spacing = 2
					tooltip = "[GetPopType('peasants').GetName]"
					using = tooltip_below
					alpha = "[TransparentIfZero(Country.GetSubsistingWorkingAdults)]"
					alwaystransparent = no
					
					icon = {
						size = { @secondary_icon_size @secondary_icon_size }
						name = peasants_icon
						texture = "gfx/interface/icons/pops_icons/peasants.dds"
						parentanchor = vcenter
					}

					textbox = {
						parentanchor = vcenter
						raw_text = "[Country.GetSubsistingWorkingAdults|Dv]"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Legitimacy
				button = {
					name = "legitimacy_button"
					# size = { 68 30 }
					size = { 64 30 }
					using = glow_button
					onclick = "[InformationPanelBar.OpenPanelTab('politics', 'interest_groups')]"

					flowcontainer = {
						name = "legitimacy"
						# minimumsize = { 68 30 }
						minimumsize = { 64 30 }
						# maximumsize = { 68 30 }
						maximumsize = { 64 30 }
						spacing = 2
						datacontext = "[Country.GetGovernmentLegitimacyLevel]"
						tooltip = "SULIUS_LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = legitimacy_icon
							texture = "gfx/interface/icons/generic_icons/legitimacy.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetGovernmentLegitimacy|1v]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 12
							margin_right = 3
						}
					}
				}

				# Battalions
				button = {
					name = "battalions_button"
					# size = { 76 30 }
					size = { 95 30 }
					using = glow_button
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"

					flowcontainer = {
						name = "battalions"
						# minimumsize = { 76 30 }
						minimumsize = { 95 30 }
						# maximumsize = { 76 30 }
						maximumsize = { 95 30 }
						spacing = 2
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = battalions_icon
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetRegularBattalions|v]+[Country.CalcConscriptableBattalions|v]"
							alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 12
						}
					}
				}

				# Infamy
				# flowcontainer = {
				# 	minimumsize = { 66 30 }
				# 	maximumsize = { 66 30 }
				# 	spacing = 2
				# 	tooltip = "[Country.GetInfamyDesc]"
				# 	using = tooltip_below
				# 	onmousehierarchyenter = "[SetTempMapModeByKey('mm_infamy')]"
				# 	onmousehierarchyleave = "[RemoveTempMapMode]"
				# 	alpha = "[TransparentIfZero(Country.GetInfamy)]"
				# 	alwaystransparent = no

				# 	icon = {
				# 		size = { @secondary_icon_size @secondary_icon_size }
				# 		texture = "[Country.GetInfamyIconTexture]"
				# 		parentanchor = vcenter
				# 	}
				# 	textbox = {
				# 		parentanchor = vcenter
				# 		raw_text = "#variable [Country.GetInfamy|0]#!"
				# 		autoresize = yes
				# 		align = left|nobaseline
				# 		elide = right
				# 		fontsize_min = 12
				# 	}
				# }
			}
		
			### EXTRA INFO
			flowcontainer = {
				name = "extra_info"
				layoutpolicy_vertical = expanding			

				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
					margin_right = 10
				}

				# Prestige
				button = {
					name = "prestige_button"
					# size = { 88 30 }
					size = { 85 30 }
					using = glow_button
					onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
					
					flowcontainer = {
						name = "prestige"
						# minimumsize = { 88 30 }
						minimumsize = { 85 30 }
						# maximumsize = { 88 30 }
						maximumsize = { 85 30 }
						spacing = 2
						# tooltip = "COUNTRY_PRESTIGE_BREAKDOWN"
						using = kmpmp_prestige_tooltip_with_graph
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = prestige_icon
							texture = "gfx/interface/icons/generic_icons/prestige.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							text = "[Country.GetPrestige|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 12
						}
					}
				}

				# Innovation
				button = {
					name = "innovation_button"
					# size = { 78 30 }
					size = { 73 30 }
					using = glow_button
					onclick = "[InformationPanelBar.OpenPanelCycleTabs('tech_tree', 'production|military|society')]"

					flowcontainer = {
						name = "innovation"
						# minimumsize = { 78 30 }
						minimumsize = { 73 30 }
						# maximumsize = { 78 30 }
						maximumsize = { 73 30 }
						spacing = 2
						tooltip = "SULIUS_RESEARCH"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = infamy_icon
							texture = "gfx/interface/icons/generic_icons/innovation.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetWeeklyInnovation|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetWeeklyInnovation)]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 12
							margin_right = 3
						}
					}
				}

				# SoL
				flowcontainer = {
					# minimumsize = { 68 30 }
					minimumsize = { 80 30 }
					# maximumsize = { 68 30 }
					maximumsize = { 80 30 }
					spacing = 2
					using = average_standard_of_living_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_standard_of_living')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alwaystransparent = no
				
					textbox = {
						parentanchor = vcenter
						text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v]"
						autoresize = yes
						align = left|nobaseline
						fontsize = 21 #hack to get the same size on the text icon as the rest in the top bar
					}

					textbox = {
						parentanchor = vcenter
						text = "[Country.GetFormattedStandardOfLivingAll|v]"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
						margin_right = 3
					}
				}

				# Radicals
				flowcontainer = {
					# minimumsize = { 76 30 }
					minimumsize = { 80 30 }
					# maximumsize = { 76 30 }
					maximumsize = { 80 30 }
					spacing = 2	
					using = radicals_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_radicals')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alpha = "[TransparentIfZero_int64(Country.GetNumRadicals)]"
					alwaystransparent = no
			
					icon = {
						texture = "gfx/interface/icons/generic_icons/population_radical.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetNumRadicals|D]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Unemployed
				flowcontainer = {
					name = "unemployed"
					# minimumsize = { 85 28 }
					minimumsize = { 80 30 }
					# maximumsize = { 85 28 }
					maximumsize = { 80 30 }
					spacing = 2
					tooltip = "[concept_unemployed]"
					using = tooltip_below
					alpha = "[TransparentIfZero(Country.GetUnemployedWorkingAdults)]"
					alwaystransparent = no
					
					icon = {
						size = { @secondary_icon_size @secondary_icon_size }
						name = unemployed_icon
						texture = "gfx/interface/icons/pops_icons/unemployed.dds"
						parentanchor = vcenter
					}

					textbox = {
						parentanchor = vcenter
						raw_text = "[Country.GetUnemployedWorkingAdults|Dv]"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Infamy
				flowcontainer = {
					# minimumsize = { 84 30 }
					minimumsize = { 64 30 }
					# maximumsize = { 84 30 }
					maximumsize = { 64 30 }
					spacing = 2
					tooltip = "[Country.GetInfamyDesc]"
					using = tooltip_below
					onmousehierarchyenter = "[SetTempMapModeByKey('mm_infamy')]"
					onmousehierarchyleave = "[RemoveTempMapMode]"
					alpha = "[TransparentIfZero(Country.GetInfamy)]"
					alwaystransparent = no

					icon = {
						size = { @secondary_icon_size @secondary_icon_size }
						texture = "[Country.GetInfamyIconTexture]"
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						raw_text = "#variable [Country.GetInfamy|0]#!"
						autoresize = yes
						align = left|nobaseline
						elide = right
						fontsize_min = 12
					}
				}

				# Flotillas
				button = {
					name = "flotillas_button"
					# size = { 76 30 }
					size = { 95 30 }
					using = glow_button
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'navy')]"

					flowcontainer = {
						name = "Flotillas"
						# minimumsize = { 76 30 }
						minimumsize = { 95 30 }
						# maximumsize = { 76 30 }
						maximumsize = { 95 30 }
						spacing = 2
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						using = tooltip_below
	
						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = flotillas_icon
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}
	
						textbox = {
							parentanchor = vcenter
							raw_text = "#variable [Country.GetWarships|0]#!"
							alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 12
						}
					}
				}

			}
		}
	}
		

	type kmpmp_topbar = widget {
		widget = {
			name = "topbar"
			max_update_rate = 8
			using = hud_visibility
			datacontext = "[AccessMetaPlayer.AccessPlayedOrObservedCountry]"
			using = clickthrough_blocker
			# size = { 705 80 }
			size = { 705 100 }
			allow_outside = yes
			resizeparent = yes
			
			#alpha = 0
			#position = { 0 -100 }

			#state = {
			#	name = _show
			#	using = default_show_properties
			#	#position_y = 0
			#	
			#	on_start = "[PdxGuiTriggerAllAnimations('hud_shiny_effect_show')]"
			#}
			#state = {
			#	name = _hide
			#	using = default_hide_properties
			#	#position_y = -100
			#}
			
			using = default_fade_in_out
			
			onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_topbar_secondary_stats','show_topbar_secondary_stats')]"
			onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_topbar_secondary_stats','hide_topbar_secondary_stats')]"

			widget = {
				# kmpmp can be used to move the situation and alert icons if topbar grows
				# resizeparent = yes

				### background
				#this is also used to trigger notifications maximize/minimize
				#when you open/close any fullscreen (did not know where else to put it)
				widget = {
					using = fullscreen_hide
					size = { 100% 100% }
					
					state = {
						name = _show
						alpha = 1
						duration = 0
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_minimize','notifications_maximize')]"
					}
					state = {
						name = _hide
						alpha = 0
						duration = 0.2
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_maximize','notifications_minimize')]"
					}
					
					background = {
						texture = "gfx/interface/main_hud/topbar_bg.dds"
						shaderfile = "gfx/FX/pdxgui_default.shader"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 100
						texture_density = 2
						using = hud_elements_alpha
						
						modify_texture = {
							texture = "gfx/interface/backgrounds/default_bg_shading.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
						modify_texture = {
							using = texture_velvet
						}
						modify_texture = {
							using = fancy_pattern
						}
					}
					icon = {
						texture = "gfx/interface/main_hud/topbar_side_dec.dds"
						size = { 100% 100% }
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 110
						texture_density = 2
						
						using = hud_shiny_effect
					}
				}
				
				flowcontainer = {
					margin_right = 35
					margin_bottom = 7
					resizeparent = yes
					
					container = {
						### PRIMARY ICONS
						flowcontainer = {
							position = { 130 -1 }

							block "spacing" {
								spacing = 12
							}
							margin_bottom = 5
							
							flowcontainer = {
								# TODO Mikael / Aron: surely there is a better way to do this
								name = "tutorial_highlight_all_capacities"
								block "spacing" {
									spacing = 12
								}
								
								### BUREAUCRACY
								button = {
									name = "tutorial_highlight_bureaucracy"
									using = glow_button
									size = { 100 40 }
									tooltip = "BUREAUCRACY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = bureaucracy_icon
										texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('bureaucracy')|D=+]#!"
										align = center|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('bureaucracy')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('bureaucracy'))]"
										}
									}			
								}
							
								### AUTHORITY
								button = {
									name = "tutorial_highlight_authority"
									using = glow_button
									size = { 100 40 }
									tooltip = "AUTHORITY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = authority_icon
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('authority')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('authority')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('authority'))]"
										}
									}				
								}
							
								### INFLUENCE
								button = {
									name = "tutorial_highlight_influence"
									using = glow_button
									size = { 100 40 }
									tooltip = "INFLUENCE_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = dip_power_icon
										texture = "gfx/interface/icons/topbar/influence_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('influence')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('influence')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('influence'))]"
										}
									}
								}
							}

							block "convoys_info" {
								button = {
									name = "tutorial_highlight_convoys"
									using = glow_button
									size = { 100 40 }
									tooltip = "CONVOY_TOPBAR_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenMarketPanelTab(AccessPlayer.AccessFirstMarket, 'trade_routes')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									alpha = "[TransparentIfZero(GetPlayer.GetSupplyNetworkStrength)]"
									
									widget = {
										size = { 32 32 }
										name = convoys_icon
										parentanchor = vcenter
										position = { 0 2 }
									
										icon = {
											parentanchor = center
											size = { 28 28 }
											texture = "gfx/interface/icons/generic_icons/convoys.dds"
										}
										
									}
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetNumAvailableConvoys|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitConvoyRatioForProgressBar))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessConvoyRatioForProgressBar)]"
										}
									}
								}	
							}

							# TODO - don't mix multiple infos... show just cohesion
							# but in general we need to rework the topbar implementation for better size adjustment
							# maybe we can use a hbox as parent
							block "powerbloc_cohesion_info" {
								button = {
									using = glow_button
									size = { 100 40 }
									onclick = "[InformationPanelBar.OpenPowerBlocPanelTab( PowerBloc.Self, 'default' )]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

									datacontext = "[Country.GetPowerBloc]"
									
									icon = {
										parentanchor = vcenter
										size = { 32 32 }
										position = { 0 2 }
										texture = "[PowerBloc.GetFlag.GetMediumPowerBlocCoaTexture]"
										frame = "[PowerBloc.GetFlag.GetMediumPowerBlocCoaFrame]"
										framesize = "[GetMediumPowerBlocCoaFrameSize]"
				
										tooltipwidget = {
											FancyTooltip_PowerBloc = {}
										}
									}

									flowcontainer = {
										position = { 35 -3 }
										parentanchor = vcenter
										spacing = 2

										flowcontainer = {
											datacontext = "[PowerBloc.GetCohesionLevel]"
											tooltip = "COHESION_LEVEL_ACTIVE_TOOLTIP"
											spacing = -8
							
											icon = {
												size = { 17 17 }
												texture = "gfx/interface/icons/generic_icons/cohesion.dds"
												alpha = 0.8
											}
							
											textbox = {
												align = nobaseline
												parentanchor = vcenter
												raw_text = "[PowerBloc.GetCohesion|v0]"
												autoresize = yes
												elide = right
											}
										}

										flowcontainer = {
											tooltip = "POWER_BLOC_MANDATE_PROGRESS_TOOLTIP"
											spacing = -8

											icon = {
												size = { 17 17 }
												texture = "gfx/interface/icons/generic_icons/mandate.dds"
												alpha = 0.8
											}

											textbox = {
												align = nobaseline
												parentanchor = vcenter
												autoresize = yes
												elide = right
												text = "POWER_BLOC_MANDATE_PROGRESS_TIMER"
											}
										}
									}

									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
							
										kmpmp_levels_progressbar = {
											datamodel = "[GetCohesionLevels]"
											# position = { 0 2 }
											parentanchor = vcenter
											size = { 60 6 }
											
											blockoverride "item_properties" {
												layoutstretchfactor_horizontal = "[FixedPointToInt(CohesionLevel.GetWidth)]"
												size = { 0 6 }
												# tooltip = "[SelectLocalization( CohesionLevel.IsActive( PowerBloc.GetCohesion ), 'COHESION_LEVEL_ACTIVE_TOOLTIP', 'COHESION_LEVEL_INACTIVE_TOOLTIP' )]"
											}
							
											blockoverride "level_active" {
												visible = "[CohesionLevel.IsActive( PowerBloc.GetCohesion )]"
											}
							
											blockoverride "last_level" {
												visible = "[Not(EqualTo_CFixedPoint(CohesionLevel.GetUpperBound,GetDefine('NPowerBlocs','COHESION_TARGET_MAX')))]"
											}
											
											blockoverride "default_progressbar_value" {
												value = "[CohesionLevel.GetProgress( PowerBloc.GetCohesion )]"
											}
										}		
									}
								}
							}
							
							### MONEY
							container = {
								name = "tutorial_highlight_treasury"
								layoutpolicy_vertical = expanding
								
								button = {
									using = glow_button					
									size = { 100 40 }
									tooltip = "CAPITAL_MONEY"
									using = tooltip_below
									using = money_tooltip_with_graph
									onclick = "[InformationPanelBar.OpenPanelTab('budget', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
								
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = income_power_icon
										texture = "gfx/interface/icons/topbar/income_power_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										text = "[AccessPlayer.PredictWeeklyBalanceWithEconomyHealthHint]"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.GetCreditRatio, '(CFixedPoint)0' )]"

										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "credit_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetCreditRatio)]"
												min = 0  
												max = 1
											}
										}
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThan_CFixedPoint( GetPlayer.GetGoldReserveRatio, '(CFixedPoint)0' )]"
									
										gold_progressbar_horizontal = {
											parentanchor = vcenter
											name = "gold_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetGoldReserveRatio )]"
												min = 0  
												max = 1
											}
										}
									}
								}
							}
							
						}
						
						#shows only on hover
						kmpmp_topbar_secondary_icons = {
							visible = "[GetVariableSystem.Exists('more_topbar_info')]"
						}
						
						#locked
						kmpmp_topbar_secondary_icons = {
							visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
							
							blockoverride "animation" {
								position = { 0 44 }
							}
						}
					}
				}
			}
			
			### LOCK TOGGLE FOR SECONDARY ROW OF ICONS
			# button_icon_round_toggle = {
			# 	visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
			# 	size = { 24 24 }
			# 	parentanchor = bottom|right
			# 	position = { -25 -9 }

			# 	alpha = 0

			# 	state = {
			# 		name = show_topbar_secondary_stats
			# 		delay = 0.15
			# 		alpha = 1
			# 		duration = 0.15
			# 		using = Animation_Curve_Default
			# 	}
			# 	state = {
			# 		name = hide_topbar_secondary_stats
			# 		alpha = 0
			# 		duration = 0
			# 		using = Animation_Curve_Default
			# 	}

			# 	blockoverride "on_click" {
			# 		onclick = "[GetVariableSystem.Toggle('more_topbar_info')]"
			# 	}
			# 	blockoverride "view_1" {
			# 		visible = "[GetVariableSystem.Exists('more_topbar_info')]"
			# 	}
			# 	blockoverride "view_2" {
			# 		visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
			# 	}
			# 	blockoverride "icon_1" {
			# 		texture = "gfx/interface/buttons/button_icons/unlock.dds"
			# 	}
			# 	blockoverride "icon_2" {
			# 		texture = "gfx/interface/buttons/button_icons/lock.dds"
			# 	}
			# 	blockoverride "tooltip_1" {
			# 		tooltip = "LOCK_TOPBAR"
			# 	}
			# 	blockoverride "tooltip_2" {
			# 		tooltip = "UNLOCK_TOPBAR"
			# 	}
			# }
			
			### FLAG
			fancy_flag = {
				blockoverride "rank_badge_block" {} # Show rank badge seperately from flag with topbar_rank

				observer_mode_overlay = {
					blockoverride "observer_properties" {
						position = { -1 -105 }
					}

					blockoverride "icon_size" {
						size = { 25 25 }
					}

					blockoverride "fontsize" {
						using = fontsize_medium
						maximumsize = { 100 -1 }
					}
				}
			}
		}
	}
}
