# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width_minus_20 = 520
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types power_bloc_formation
{
	type power_bloc_formation_panel = default_block_window
	{
    	name = "power_bloc_formation_panel"
		datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation]"

		blockoverride "window_header_name"
		{
			text = "POWER_BLOC_FORMATION_HEADER"
		}

		blockoverride "header_close_button_visibility"
		{
			visible = yes
		}

		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation]"
				margin_top = 10
				spacing = 10
				
				flowcontainer = {
					parentanchor = hcenter
					spacing = 5

					# "Choose Name" section
					flowcontainer = {
						parentanchor = vcenter
						direction = vertical

						# Set a custom name
						# todo PRCAL-33612 - We need to make the editbox unfocus itself when you click outside of it, I have no idea how //Aron
						editbox = {
							name = "power_bloc_name_edit"
							visible = "[HasDlcFeature('power_bloc_features')]"
							parentanchor = hcenter
							maxcharacters = 30
							size = { 490 40 }
							margin_left = 10
							alwaystransparent = no
							focuspolicy = click
							focus_on_visible = no
							align = nobaseline

							background = {
								using = text_edit_bg
							}


							text = "[PowerBlocFormation.GetChosenName]"
							ontextedited = "[PowerBlocFormationPanel.OnEditName]"

							textbox = {
								visible = "[StringIsEmpty(PowerBlocFormation.GetChosenName)]"
								parentanchor = vcenter
								align = nobaseline
								position = { 10 0 }
								autoresize = yes
								default_format = "#title"
								text = "POWER_BLOC_FORMATION_CLICK_TO_CHANGE_NAME"
							}

							button = {
					    		alpha = 0
					    		name = reform_power_bloc_button_hidden
					    		visible = "[GetScriptedGui('power_bloc_reform').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					        	using = default_button
					        	size = { 0% 0% }
						        state = {
						            name = _show
						            start_sound = {
						                soundeffect = "event:/SFX/UI/SideBar/journal"
						            }
						            on_start = "[GetScriptedGui('power_bloc_reform').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						            on_start = "[Execute(GetPlayer.LeavePowerBloc)]"
						            on_start = "[Execute(PowerBlocFormation.Confirm)]"
						            on_start = "[GetScriptedGui('power_bloc_reform_2').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
						        }
					    	}
						}

						# Show a generated name if the DLC is disabled
						widget = {
							visible = "[Not(HasDlcFeature('power_bloc_features'))]"
							size = { 490 40 }

							background = {
								using = entry_bg_simple
							}

							textbox = {
								parentanchor = vcenter
								margin_left = 10
								autoresize = yes
								align = nobaseline
								text = "[PowerBlocFormation.GetChosenName]"
							}
						}
					}

					button_icon_round_action = {
						parentanchor = vcenter
						size = { 40 40 }
						onclick = "[PowerBlocFormation.RandomizeName]"
						tooltip = "RANDOMIZE_POWER_BLOC_NAME"

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/randomise.dds"
						}

						blockoverride "icon_size" {
							size = { 75% 75% }
						}
					}
				}

				flowcontainer = {
					parentanchor = hcenter
					spacing = 20

					### EMBLEM CUSTOMIZATION - BUTTON
					framed_customize_button = {
						visible = "[HasDlcFeature('power_bloc_features')]"

						blockoverride "onhover" {
							onmousehierarchyenter = "[GetVariableSystem.Toggle('power_bloc_customize_emblem_hover')]"
							onmousehierarchyleave = "[GetVariableSystem.Clear('power_bloc_customize_emblem_hover')]"
						}

						blockoverride "onhover_visibility" {
							visible = "[GetVariableSystem.Exists('power_bloc_customize_emblem_hover')]"
						}

						blockoverride "onclick" {
							onclick = "[PopupManager.TogglePowerBlocCustomizationPopup]"
							onclick = "[GetVariableSystem.Set('emblem_and_colors_tab', 'true')]"
							onclick = "[GetVariableSystem.Set('statue_tab', 'false')]"
						}

						blockoverride "background" {
							background = {
								using = fade_top_entry_header_colored
								color = "[PowerBlocFormation.GetMapColor]"
								texture = "[PowerBlocFormation.GetMapTexture]"
								using = frame_small_mask
								alpha = 0.7
							}
						}

						blockoverride "tooltip" {
							tooltip = "CUSTOMIZE_EMBLEM"
						}

						blockoverride "icon_texture" {
							texture = "[PowerBlocFormation.GetConfirmedCustomCoaPreview.GetLargePowerBlocCoaTexture]"
                            frame = "[PowerBlocFormation.GetConfirmedCustomCoaPreview.GetLargePowerBlocCoaFrame]"
                            framesize = "[GetLargePowerBlocCoaFrameSize]"
						}

						blockoverride "bottom_text" {
							text = "EMBLEM_AND_COLORS"
						}
					}

					### EMBLEM - NO DLC - NO BUTTON
					framed_icon = {
						visible = "[Not(HasDlcFeature('power_bloc_features'))]"

						blockoverride "background" {
							background = {
								using = fade_top_entry_header_colored
								color = "[PowerBlocFormation.GetMapColor]"
								texture = "[PowerBlocFormation.GetMapTexture]"
								using = frame_small_mask
								alpha = 0.7
							}
						}

						blockoverride "icon_texture" {
							texture = "[PowerBlocFormation.GetConfirmedCustomCoaPreview.GetLargePowerBlocCoaTexture]"
                            frame = "[PowerBlocFormation.GetConfirmedCustomCoaPreview.GetLargePowerBlocCoaFrame]"
                            framesize = "[GetLargePowerBlocCoaFrameSize]"
						}

						blockoverride "bottom_text" {
							text = "EMBLEM_AND_COLORS"
						}
					}

					### STATUE CUSTOMIZATION
					framed_customize_button = {
						visible = "[HasDlcFeature('power_bloc_features')]"

						blockoverride "onhover" {
							onmousehierarchyenter = "[GetVariableSystem.Toggle('power_bloc_customize_statue_hover')]"
							onmousehierarchyleave = "[GetVariableSystem.Clear('power_bloc_customize_statue_hover')]"
						}

						blockoverride "onhover_visibility" {
							visible = "[GetVariableSystem.Exists('power_bloc_customize_statue_hover')]"
						}

						blockoverride "onclick" {
							onclick = "[PopupManager.TogglePowerBlocCustomizationPopup]"
							onclick = "[GetVariableSystem.Set('emblem_and_colors_tab', 'false')]"
							onclick = "[GetVariableSystem.Set('statue_tab', 'true')]"
						}

						blockoverride "tooltip" {
							tooltip = "CUSTOMIZE_STATUE"
						}

						blockoverride "icon_texture" {
							gfxtype = jomini_entitygfx_sprite
							datacontext = "[PowerBlocFormation.GetStatue]"
							entity_instance = "[PowerBlocStatue.GetEntity(PdxGuiWidget.AccessSelf)]"

							shaderfile = "gfx/FX/pdxgui_default.shader"
							effectname = "PdxGuiDefault"
							render_pass = "[GetGuiEntityShaderRenderpass]"

							gfx_environment_file = "gfx/map/environment/ui_power_bloc_statues_environment.txt"
							enabled_post_effects = luminance

							camera_position = { -13.5 12.5 -12.5 }
							camera_look_at = { 0.0 1.3 0.0 }
							camera_fov_y_degrees = 10
							camera_near_far = { 0.1 300.0 }
						}

						blockoverride "bottom_text" {
							text = "STATUE"
						}
					}
				}

				default_header = {
					using = default_list_position

					blockoverride "text" {
						text = "POWER_BLOC_IDENTITY_HEADER"
					}
				}

				flowcontainer = {
					parentanchor = hcenter
					minimumsize = { @panel_width_minus_10 80 }
					datacontext = "[PowerBlocFormation.GetSelectedIdentity]"
					direction = vertical

					using = entry_bg_fancy

					### CENTRAL IDENTITY - SELECTED
					container = {
						visible = "[PowerBlocFormation.IsAnyIdentitySelected]"
						parentanchor = hcenter
						minimumsize = { @panel_width_minus_10 130 }
						datacontext = "[PowerBlocFormation.GetSelectedIdentity]"

						button = {
							visible = "[GreaterThan_int32(GetDataModelSize(PowerBlocFormation.GetIdentities), '(int32)1')]"
							size = { 100% 100% }
							using = default_button
							onclick = "[PowerBlocFormationPanel.ToggleSelectPowerBlocIdentityMenu(PdxGuiWidget.AccessSelf)]"
						}

						background = {
							visible = "[Not(GreaterThan_int32(GetDataModelSize(PowerBlocFormation.GetIdentities), '(int32)1'))]"
							size = { 100% 100% }
							using = entry_bg_simple
							using = frame_small_mask_top
						}

						widget = {
							visible = "[Not(GreaterThan_int32(GetDataModelSize(PowerBlocFormation.GetIdentities), '(int32)1'))]"
							size = { 100% 100% }

							tooltipwidget = {
								FancyTooltip_PowerBlocIdentity = {
									blockoverride "has_principle_visibility_formation" {
										visible = "[PowerBlocFormation.HasSelectedPrinciple(PowerBlocPrinciple.Self)]"
									}
								}
							}
						}

						flowcontainer = {
							parentanchor = top
							position = { 150 10 }
							direction = vertical
							margin_bottom = 10
							spacing = 5

							textbox = {
								text = "[PowerBlocIdentity.GetNameNoFormatting]"
								default_format = "#header"
								align = nobaseline
								using = fontsize_xl
								autoresize = yes
								max_width = 350
								elide = right
								fontsize_min = 14
							}

							textbox = {
								text = "[PowerBlocIdentity.GetDesc]"
								align = nobaseline
								autoresize = yes
								multiline = yes
								max_width = 350
								elide = right
								fontsize_min = 14
							}
						}

						power_bloc_identity_icon = {
							position = { 10 5 }
							alwaystransparent = yes

							button = {
								size = { 100% 100% }
								alwaystransparent = yes
								onclick = "[PowerBlocFormationPanel.ToggleSelectPowerBlocIdentityMenu(PdxGuiWidget.AccessSelf)]"
							}
						}
					}

					flowcontainer = {
						visible = "[And(PowerBlocFormation.IsAnyIdentitySelected, Not(IsDataModelEmpty(PowerBlocFormation.GetSelectedIdentity.GetPrimaryPrincipleGroups)))]"
						parentanchor = hcenter
						direction = vertical

						# Name and info header
						container = {
							minimumsize = { @panel_width_minus_10 35 }

							background = {
								using = fade_top_entry_header_colored
								color = "[PowerBlocFormation.GetMapColor]"
							}

							textbox = {
								position = { 10 0 }
								parentanchor = vcenter
								autoresize = yes
								align = nobaseline
								elide = right
								fontsize_min = 14
								max_width = 230
								text = "DATA_PRIMARY_PRINCIPLE_GROUPS_CONCEPT"
							}

							textbox = {
								position = { -10 0 }
								parentanchor = vcenter|right
								autoresize = yes
								align = nobaseline
								elide = right
								fontsize_min = 12
								max_width = 280
								text = "PICK_AT_LEAST_ONE_PRIMARY"
							}
						}

						widget = {
							size = { 5 5 }
						}

						container = {
							parentanchor = hcenter
							minimumsize = { @panel_width_minus_10 -1 }

							dynamicgridbox = {
								parentanchor = hcenter
								flipdirection = yes
								datamodel_wrap = 2
								datamodel = "[PowerBlocIdentity.GetPrimaryPrincipleGroups]"

								item = {
									container = {
										minimumsize = { 256 -1 }

										principle_group_no_interact = {
											parentanchor = hcenter
											minimumsize = { 250 -1 }

											blockoverride "principle_item_size" {
												size = { 72 60 }
											}

											blockoverride "group_name_max_width" {
												max_width = 240
											}

											blockoverride "principle_icons_alpha" {
												alpha = "[TransparentIfFalse(PowerBlocFormation.HasSelectedPrincipleGroup(PowerBlocPrincipleGroup.Self))]"
											}

											blockoverride "has_principle_visibility" {
												visible = "[PowerBlocFormation.HasSelectedPrinciple(PowerBlocPrinciple.Self)]"
											}

											blockoverride "principle_group_tooltip" {
												tooltipwidget = {
													FancyTooltip_PowerBlocPrincipleGroup = {
														blockoverride "text_before" {
															visible = "[PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocIdentity.Self)]"
															text = "DATA_PRIMARY_PRINCIPLE_GROUP"
															margin_bottom = 15
														}
													}
												}
											}

											blockoverride "principle_tooltip" {
												tooltipwidget = {
													FancyTooltip_PowerBlocPrinciple = {
														blockoverride "text_before" {
															visible = "[PowerBlocFormation.HasSelectedPrinciple(PowerBlocPrinciple.Self)]"
															text = "POWER_BLOC_FORMATION_HAS_THIS_PRINCIPLE"
															margin_bottom = 15
														}

														blockoverride "principle_group_info" {
															custom_tooltip_textbox_with_empty_line = {
																visible = "[Not(PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocFormation.GetSelectedIdentity.Self))]"
																text = "DATA_PRINCIPLE_GROUP_ENTRY"
															}

															custom_tooltip_textbox_with_empty_line = {
																visible = "[PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocFormation.GetSelectedIdentity.Self)]"
																text = "DATA_PRIMARY_PRINCIPLE_GROUP_ENTRY"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}

						widget = {
							size = { 10 10 }
						}
					}
				}

				### CENTRAL IDENTITY - NOT SELECTED
				widget = {
					visible = "[Not(PowerBlocFormation.IsAnyIdentitySelected)]"
					parentanchor = hcenter
					size = { @panel_width_minus_10 150 }

					button = {
						parentanchor = right|vcenter
						using = default_button
						size = { 450 140 }
						onclick = "[PowerBlocFormationPanel.ToggleSelectPowerBlocIdentityMenu(PdxGuiWidget.AccessSelf)]"

						textbox = {
							parentanchor = center
							autoresize = yes
							align = nobaseline
							using = fontsize_large
							text = "SELECT_A_CENTRAL_IDENTITY"
						}
					}

					add_character_button = {
						parentanchor = vcenter

						blockoverride "onclick" {
							onclick = "[PowerBlocFormationPanel.ToggleSelectPowerBlocIdentityMenu(PdxGuiWidget.AccessSelf)]"
						}
					}
				}

				default_header = {
					using = default_list_position
					blockoverride "text" {
						text = "POWER_BLOC_PRINCIPLES_HEADER"
					}
				}

				widget = {
					parentanchor = hcenter
					size = { 530 80 }

					background = {
						using = entry_bg_simple
					}

					### AVAILABLE MANDATES
					flowcontainer = {
						parentanchor = vcenter
						margin = { 10 10 }
						spacing = 5

						icon = {
							size = { 60 60 }
							parentanchor = vcenter
							texture = "gfx/interface/icons/generic_icons/mandate.dds"
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							using = fontsize_xxl
							raw_text = "#v [PowerBlocFormation.GetPrinciplePointsRemainingRaw]#!"
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							text = "AVAILABLE_MANDATES_TITLE_FORMATION"
						}
					}

					### RESET PRINCIPLES BUTTON
					button = {
						parentanchor = right|vcenter
						position = { -20 0 }
						using = default_button_action
						size = { 155 40 }
						onclick = "[PowerBlocFormation.ResetPrinciples]"
						enabled = "[GreaterThan_int32(PowerBlocFormation.GetNumSelectedPrinciples, '(int32)0')]"
						tooltip = "RESET_PRINCIPLES_TOOLTIP"

						textbox = {
							parentanchor = center
							align = nobaseline
							autoresize = yes
							text = "RESET"
						}
					}
				}

				### PRINCIPLES
				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					spacing = 20
					allow_outside = yes

					flowcontainer = {
						spacing = 10
						parentanchor = hcenter
						allow_outside = yes

						# PRINCIPLE SLOTS 1 AND 3
						flowcontainer = {
							direction = vertical
							spacing = 10
							parentanchor = vcenter
							allow_outside = yes

							principle_slot_formation = {
								name = "tutorial_highlight_first_principle_slot_during_formation"
								datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation.GetPrincipleSlot( '(int32)0' )]"

								blockoverride "tooltip_alignment" {
									using = tooltip_ne
								}
							}

							principle_slot_formation = {
								visible = "[HasDlcFeature('power_bloc_features')]"
								datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation.GetPrincipleSlot( '(int32)2' )]"

								blockoverride "tooltip_alignment" {
									using = tooltip_se
								}

								blockoverride "locked_slot_tooltip" {
									tooltip = "TOOLTIP_LOCKED_PRINCIPLE_SLOT_3_DURING_FORMATION"
								}
							}
						}

						# PRINCIPLE SLOTS 2 AND 4
						flowcontainer = {
							direction = vertical
							spacing = 10
							parentanchor = vcenter
							allow_outside = yes

							principle_slot_formation = {
								visible = "[HasDlcFeature('power_bloc_features')]"
								datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation.GetPrincipleSlot( '(int32)1' )]"
							}

							principle_slot_formation = {
								visible = "[HasDlcFeature('power_bloc_features')]"
								datacontext = "[PowerBlocFormationPanel.GetPowerBlocFormation.GetPrincipleSlot( '(int32)3' )]"

								blockoverride "locked_slot_tooltip" {
									tooltip = "TOOLTIP_LOCKED_PRINCIPLE_SLOT_4_DURING_FORMATION"
								}
							}
						}
					}
				}
			}
		}

		blockoverride "fixed_bottom"
		{
			flowcontainer = {
				direction = vertical
				spacing = 5

				divider_clean = {
					size = { @panel_width_plus_14 4 }
				}

				background = {
					using = dark_area
				}

				widget = {
					size = { 5 5 }
				}

				# Formation button
				button = {
					name = "tutorial_highlight_form_this_power_bloc_button"
					using = default_button_primary_big_action
					parentanchor = hcenter
					size = { 540 50 }
					using = fontsize_large
					visible = "[Not(GetScriptedGui('power_bloc_prereform').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
					enabled = "[IsValid(PowerBlocFormation.Confirm)]"
					onclick = "[PopupManager.AskConfirmationWithSound(PowerBlocFormation.Confirm, 'event:/SFX/UI/SubjectInteractions/power_bloc_formation')]"
					tooltip = "FORM_POWER_BLOC_CONFIRM_BUTTON_TOOLTIP"
					using = default_content_fade

					flowcontainer = {
						parentanchor = center

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							text = "FORM_THIS_POWER_BLOC"
						}
					}
				}

				button = {
					name = "reform_power_bloc"
					using = default_button_primary_big_action
					parentanchor = hcenter
					size = { 540 50 }
					using = fontsize_large
					visible = "[And(GetScriptedGui('power_bloc_prereform').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ), GetScriptedGui('kates_power_bloc_rule_enable_identity_switch_gui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"
					enabled = "[Not(GreaterThan_int32(PowerBlocFormation.GetPrinciplePointsRemainingRaw, '(int32)0'))]"
					onclick = "[GetScriptedGui('power_bloc_prereform').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
					tooltip = "FORM_POWER_BLOC_CONFIRM_REFORM_BUTTON_TOOLTIP"
					using = default_content_fade

					flowcontainer = {
						parentanchor = center

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							text = "REFORM_THIS_POWER_BLOC"
						}
					}
				}

				widget = {
					size = { 5 5 }
				}
			}
		}

		blockoverride "bottom_spacing" {}
	}
}
